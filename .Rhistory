shiny::runApp()
<<<<<<< Updated upstream
df <- data.frame(es = c(0.3, 0.2, 0.1),
se = c(0.05, 0.06, 0.04),
id = c("Study 1", "Study 2", "Study 3"))
ggplot(data = df) +
# add vertical dashed line to indicate null effect
geom_vline(xintercept = 0, linetype = "dashed") +
# add point estimate
geom_point(aes(x = es, y = method_ordered)) +
# add 95% CI
geom_segment(aes(x = es - 1.96 * se, xend = es + 1.96 * se,
y = method_ordered, yend = method_ordered)) +
# add labels
geom_text(aes(x = es, y = method_ordered, label = label), vjust = -1.5) +
# highlight selected estimation method [NEEDSFIX: FE]
gghighlight(method == re_type,
use_direct_label = FALSE,
unhighlighted_params = list(color = "#525252")) +
# set x-axis limits
xlim(c(-1, 1)) +
# set labels and title
xlab("Effect size") +
ylab("Estimator") +
ggtitle("Sensitivity Analysis Based on Estimation Method") +
# set theme and center title
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df) +
# add vertical dashed line to indicate null effect
geom_vline(xintercept = 0, linetype = "dashed") +
# add point estimate
geom_point(aes(x = es, y = id)) +
# add 95% CI
geom_segment(aes(x = es - 1.96 * se, xend = es + 1.96 * se,
y = id, yend = id)) +
# set x-axis limits
xlim(c(-1, 1)) +
# set labels and title
xlab("Effect size") +
ylab("Estimator") +
ggtitle("Sensitivity Analysis Based on Estimation Method") +
# set theme and center title
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df) +
# add vertical dashed line to indicate null effect
geom_vline(xintercept = 0, linetype = "dashed") +
# add point estimate
geom_point(aes(x = es, y = id)) +
# add 95% CI
geom_segment(aes(x = es - 1.96 * se, xend = es + 1.96 * se,
y = id, yend = id)) +
# set x-axis limits
xlim(c(0, 1)) +
# set labels and title
xlab("Effect size") +
ylab("Estimator") +
ggtitle("Sensitivity Analysis Based on Estimation Method") +
# set theme and center title
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
body <- ggplot(data = df) +
# add vertical dashed line to indicate null effect
geom_vline(xintercept = 0, linetype = "dashed") +
# add point estimate
geom_point(aes(x = es, y = id)) +
# add 95% CI
geom_segment(aes(x = es - 1.96 * se, xend = es + 1.96 * se,
y = id, yend = id)) +
# set x-axis limits
xlim(c(0, 1)) +
# set labels and title
xlab("Effect size") +
ylab("Estimator") +
ggtitle("Sensitivity Analysis Based on Estimation Method") +
# set theme and center title
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
df <- data.frame(es = c(0.3, 0.2, 0.1, 0.2),
se = c(0.05, 0.06, 0.04, 0.02),
id = c("Study 1", "Study 2", "Study 3", "Summary Effect"),
type = c(rep("study", 3), "summary"))
df <- as.data.table(df)
body <- ggplot(data = df[type == "study"]) +
# add vertical dashed line to indicate null effect
geom_vline(xintercept = 0, linetype = "dashed") +
# add point estimate
geom_point(aes(x = es, y = id)) +
# add 95% CI
geom_segment(aes(x = es - 1.96 * se, xend = es + 1.96 * se,
y = id, yend = id)) +
# set x-axis limits
xlim(c(0, 1)) +
# set labels and title
xlab("Effect size") +
ylab("Estimator") +
ggtitle("Sensitivity Analysis Based on Estimation Method") +
# set theme and center title
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df[type == "summary"]) +
geom_polygon(x = c(es - 1.96 * se, es, es + 1.96 * se, es),
y = c(0, 1, 0, -1))
ggplot(data = df[type == "summary", ]) +
geom_polygon(x = c(es - 1.96 * se, es, es + 1.96 * se, es),
y = c(0, 1, 0, -1))
ggplot(data = df[type == "summary", ]) +
geom_polygon(aes(x = c(es - 1.96 * se, es, es + 1.96 * se, es),
y = c(0, 1, 0, -1)))
ggplot(data = df[type == "summary", ]) +
geom_polygon(aes(x = c(0.2 - 1.96 * 0.02, 0.2, 0.2 + 1.96 * 0.02, 0.2),
y = c(0, 1, 0, -1)))
ggplot(data = data.frame(x = c(0.2 - 1.96 * 0.02, 0.2, 0.2 + 1.96 * 0.02, 0.2),
y = c(0, 1, 0, -1))) +
geom_polygon(aes(x = x, y = y))
ggplot(data = data.frame(x = c(0.2 - 1.96 * 0.02, 0.2, 0.2 + 1.96 * 0.02, 0.2),
y = c(0, 1, 0, -1))) +
geom_polygon(aes(x = x, y = y)) +
theme_void
ggplot(data = data.frame(x = c(0.2 - 1.96 * 0.02, 0.2, 0.2 + 1.96 * 0.02, 0.2),
y = c(0, 1, 0, -1))) +
geom_polygon(aes(x = x, y = y)) +
theme_void()
body <- ggplot(data = df[type == "study"]) +
# add vertical dashed line to indicate null effect
geom_vline(xintercept = 0, linetype = "dashed") +
# add point estimate
geom_point(aes(x = es, y = id)) +
# add 95% CI
geom_segment(aes(x = es - 1.96 * se, xend = es + 1.96 * se,
y = id, yend = id)) +
# set x-axis limits
xlim(c(0, 1)) +
# set labels and title
xlab("Effect size") +
ylab("Estimator") +
ggtitle("Sensitivity Analysis Based on Estimation Method") +
# set theme and center title
theme_void() +
theme(plot.title = element_text(hjust = 0.5))
s <- ggplot(data = data.frame(x = c(0.2 - 1.96 * 0.02, 0.2, 0.2 + 1.96 * 0.02, 0.2),
y = c(0, 1, 0, -1))) +
geom_polygon(aes(x = x, y = y)) +
ylab("") +
theme_minimal()
library(ggplot2)
library(egg)
egg::ggarrange(plots = list(body, s),
nrow = 2, ncol = 1)
s <- ggplot(data = data.frame(x = c(0.2 - 1.96 * 0.02, 0.2, 0.2 + 1.96 * 0.02, 0.2),
y = c(0, 1, 0, -1))) +
xlim(c(0, 1)) +
geom_polygon(aes(x = x, y = y)) +
ylab("") +
theme_minimal()
egg::ggarrange(plots = list(body, s),
nrow = 2, ncol = 1)
s <- ggplot(data = data.frame(x = c(0.2 - 1.96 * 0.02, 0.2, 0.2 + 1.96 * 0.02, 0.2),
y = c(0, 0.1, 0, -0.1))) +
xlim(c(0, 1)) +
geom_polygon(aes(x = x, y = y)) +
ylab("") +
theme_minimal()
egg::ggarrange(plots = list(body, s),
nrow = 2, ncol = 1)
s <- ggplot(data = data.frame(x = c(0.2 - 1.96 * 0.02, 0.2, 0.2 + 1.96 * 0.02, 0.2),
y = c(0, 0.1, 0, -0.1))) +
xlim(c(0, 1)) +
ylim(c(0, 1)) +
geom_polygon(aes(x = x, y = y)) +
ylab("") +
theme_minimal()
egg::ggarrange(plots = list(body, s),
nrow = 2, ncol = 1)
s <- ggplot(data = data.frame(x = c(0.2 - 1.96 * 0.02, 0.2, 0.2 + 1.96 * 0.02, 0.2),
y = c(0, 0.1, 0, -0.1))) +
xlim(c(0, 1)) +
ylim(c(-1, 1)) +
geom_polygon(aes(x = x, y = y)) +
ylab("") +
theme_minimal()
egg::ggarrange(plots = list(body, s),
nrow = 2, ncol = 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?viz_forest()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
>>>>>>> Stashed changes
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?viz_funnel
runApp()
runApp()
library(haven)
brainvol <- read_sav("~/Documents/FWF/Shiny App/brainvol.sav")
View(brainvol)
res <- rma(yi = z, sei = z.SE, data = brainvol)
res$QEp
round(res$QEp, 4)
sprintf("Q(df = %.0f) = %.4f, p %s", res$k.all - 1, res$QE,
if(res$QEp < .0001){paste("< .0001")} else {paste("= ", round(res$Qp, 4))})
sprintf("Q(df = %.0f) = %.4f, p %s", res$k.all - 1, res$QE,
if(res$QEp < .0001){paste("< .0001")} else {paste("= ", round(res$QEp, 4))})
sprintf("Q(df = %.0f) = %.4f, p %s", res$k.all - 1, res$QE,
if(res$QEp < 0.0001){paste("< .0001")} else {paste("= ", round(res$QEp, 4))})
res$QEp < 0.0001
sprintf("Q(df = %.0f) = %.4f, p %s", res$k.all - 1, res$QE,
if(res$QEp < 0.0001){paste("< .0001")} else {paste("= ", round(format(res$QEp, scientific=FALSE), 4))})
format(res$QEp, scientific=FALSE)
as.integer(res$QEp)
as.numeric(format(res$QEp, scientific=FALSE))
sprintf("Q(df = %.0f) = %.4f, p %s", res$k.all - 1, res$QE,
if(res$QEp < 0.0001){paste("< .0001")} else {paste("= ", round(as.numeric(format(res$QEp, scientific=FALSE)), 4))})
sprintf("Q(df = %.0f) = %.4f, p %s", res$k.all - 1, res$QE,
sprintf("Q(df = %.0f) = %.4f, p %s", res$k.all - 1, res$QE,
if(res$QEp < 0.0001){paste("< .0001")} else {paste("= ", format(round(res$QEp, 4),
scientific = FALSE))})
runApp()
sprintf("Q(df = %.0f) = %.4f, p %s", res$k.all - 1, res$QE,
if(res$QEp < 0.0001){paste("< .0001")} else {paste("= ", format(round(res$QEp, 4),
scientific = FALSE))})
runApp()
shiny::runApp()
runApp()
?menuItem
runApp()
?req()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?menuItem()
?box()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
