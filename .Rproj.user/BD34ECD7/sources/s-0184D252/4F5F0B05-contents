# # ----------------------------------------------------------------------------------------
# # R Code for MA2 of "How biased is the literature in Psychological Science?"     
# # File content: EFFECT SIZE TRANSFORMATION // COINING                    
# # Last update: 08 06 2020                                                         
# # Authors: Magdalena Siegel & Jakob Pietschnig                                  
# # Contact: magdalena.siegel@univie.ac.at                                         
# # ----------------------------------------------------------------------------------------
# 
# 
# ##### OVERALL N -----
# # calculate n from n1 and n2
# # if("n1" %in% colnames(data)) {
# #   data[, n := rowSums(.SD, na.rm = TRUE), .SDcols = c("n1", "n2")]
# # }
# 
# #### EFFECT SIZE TRANSFORMATION -----
# #### **** original effect size: d or g -----
browser()
if (type_ES=="g" | type_ES == "d") {
  if (type_ES=="g") {

  # compute d and d.se
  data[, `:=` (J = 1 - (3 / (4 * (n - 2) - 1)))][,
         `:=` (d = g / J,
               d.SE = g.SE / J)][, J := NULL]

    } else if (type_ES == "d") {

    # compute g and g.se
    data[, `:=` (J = 1 - (3 / (4 * (n - 2) - 1)))][,
            `:=` (g = d * J,
                  g.SE = d.SE * J)][, J := NULL]

    }
}

  # compute logOR and OR
   data[, `:=` (logOR = pi * d / sqrt(3),
               logOR.SE = sqrt(pi^2 * d.SE^2 / 3))][,
                OR := exp(logOR)]

  # compute r and r.se, weighted or with overall n
  if (("n1" %in% colnames(data))){
    data[, `:=` (r = d / sqrt(d^2 + (n1 + n2)^2/(n1 * n2)),
                 var.r = ((n1 + n2)^2 / (n1 * n2))^2 * d.SE^2 / (d^2 + ((n1 + n2)^2/(n1 * n2)))^3)][,
                 r.SE := sqrt(var.r)][, var.r := NULL]

  } else {
    data[, `:=` (r = d / sqrt(d^2 + 4),
                 var.r = (16 * d.SE^2 / ((d^2 + 4)^3)))][,
                 r.SE := sqrt(var.r)][, var.r := NULL]

  }
  # compute z and z.se
  data[, `:=` (z = 0.5 * log((1 + r)/(1 - r)),
               z.SE = r.SE / (1 - r^2))]

#### **** original effect size: OR or logOR ----
if (type_ES == "OR" | type_ES == "logOR") {
  if (type_ES == "OR") {
    # calculate logOR and variance
    data <- as.data.table(data[, escalc(ai = ai, bi = bi, ci = ci, di = di,
                                        data = .SD,
                                        measure = "OR",
                                        append = T)]) [, logOR.SE := sqrt(vi)]
    # rename into logOR and logOR.se
    setnames(data, old = "yi", new = "logOR")
    data[, vi := NULL]

    # calculate ns
    data[, n := rowSums(.SD), .SDcols = c("ai", "bi", "ci", "di")]

  } else if (type_ES == "logOR") {
    data[, OR := exp(logOR)]
  }
  # convert into d and d.se
  data[, `:=` (d = logOR * (sqrt(3) / pi),
               d.SE = sqrt(logOR.SE^2 * (3 / pi^2)))][,

  # convert into g and g.se
          `:=` (J = 1 - (3 / (4 * (n - 2) - 1)))][,
                `:=` (g = d * J,
                      g.SE = d.SE * J)
                ][, J := NULL]

  # convert into r and r.se
  data[, `:=` (r = d / sqrt(d^2 + 4),
               var.r = (16 * d.SE^2 / ((d^2 + 4)^3)))][,
               r.SE := sqrt(var.r)][, var.r := NULL]

  # convert into z and z.se
  data[, `:=` (z = 0.5 * log((1 + r)/(1 - r)),
               z.SE = r.SE / (1 - r^2))]
}



#### **** original effect size: r or z  -----
if (type_ES == "r" | type_ES == "z") {
  if(type_ES == "r") {

  # compute z and z.se
  data[, `:=` (z = 0.5 * log((1 + r)/(1 - r)),
               z.SE = 1 / (sqrt(n-3)))][,
                                        r.SE := (1 - r^2) * z.SE]
  } else if (type_ES == "z") {


    # compute z.se
    data[, z.SE := 1 / (sqrt(n - 3))]


  # compute r and r.se
    data[, `:=` (r = {
      r.c <- exp(2 * z)
      (r.c - 1) / (r.c + 1)})][,
                               r.SE := (1 - r^2) * z.SE]

  }

  # compute d and d.se
  data[, `:=` (d = (2 * r)/(sqrt(1 - r^2)),
               d.SE = sqrt((4 * r.SE^2) / ((1 - r^2)^3)),

  # compute g and g.se
        J = 1 - (3 / (4 * (n - 2) - 1)))][,
          `:=` (g = d * J,
                g.SE = d.SE * J,

  # compute logOR and OR
                logOR = pi * d / sqrt(3),
                logOR.SE = sqrt(pi^2 * d.SE^2 / 3))][,
                                                     OR := exp(logOR)][, J := NULL]

}

# # # RANDOM EFFECTS MODEL IN CASE OF TWO INITIAL STUDIES ---- [CHECKED]
# # if (primary_unsure =="yes") {
# #  primary_RE <- data[studyname == primary_cand1 | studyname == primary_cand2,
# #                     rma(yi = z, vi = z.SE^2, method = "ML", data = .SD)]
# #  
# #  primary_ES <- as.numeric(primary_RE$b)
# # 
# # } else {
# #   primary_ES <- data[studyname==ID_primary, z]
# # }
# # 
# # sign_primary <- sign(primary_ES)
# # 
# # if (run == 2) {
# #   if (primary_unsure_publ =="yes") {
# #     primary_RE <- data[studyname == primary_cand1_publ | studyname == primary_cand2_publ,
# #                      rma(yi = z, vi = z.SE^2, method = "ML", data = .SD)]
# #     
# #     primary_ES <- as.numeric(primary_RE$b)
# #     
# #     } else {
# #       primary_ES <- data[studyname==ID_primary_publ, z]
# #       }
# #   sign_primary <- sign(primary_ES)
# # }
# # 
# # 
# # # COINING (PRIMARY EFFECT) ---- [CHECKED]
# # if (sign_primary == -1){
# #   data[, z.trans := (-1) * z]
# # } else {
# #   data[, z.trans := z]
# # }
# # 
# # # OUTPUT ---- [CHECKED]
# # 
# # if (primary_unsure == "no") {
# #   cat(c(sprintf("effect size of primary study (%s): z = ", ID_primary), 
# #         round(data[studyname==ID_primary,z],4))) 
# # } else {
# #   cat(c(sprintf("summary effect (random effects) of %s and %s: z = ", primary_cand1, primary_cand2), 
# #         round(primary_ES,4)))
# # }
# # 
# # if (run == 2) {
# #   if (primary_unsure_publ == "no") {
# #     cat(c(sprintf("effect size of primary study (%s): z = ", ID_primary_publ), 
# #           round(data[studyname==ID_primary_publ,z],4))) 
# #   } else {
# #     cat(c(sprintf("summary effect (random effects) of %s and %s: z = ", primary_cand1_publ, primary_cand2_publ), 
# #           round(primary_ES,4)))
# #   
# # }
# # 
# # }
# # 
# # cat("  ", sep = "\n") # just for output
# # print(head(data)) #let's see what we have here
# 
